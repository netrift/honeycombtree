<?php

/**
 * @file 
 *  Install file for honeycomb
 */ 

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Field;
use Drupal\Core\Entity;
use Drupal\taxonomy\Entity\Vocabulary;


/**
 * Implements hook_install();
 */
function honeycomb_install() {

  // Now lets attached a term ref field to company node type
  entity_create('field_storage_config', array(
    'field_name' => 'taxonomy_vendor_category',
    'entity_type' => 'node',
    'type'  => 'taxonomy_term_reference',
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => 'vendor_category',
          'parent' => 0,
        ),
      ),
    ),
  ))->save();
  // create the instance on the bundle
  entity_create('field_config', array(
    'field_name' => 'taxonomy_vendor_category',
    'entity_type' => 'node',
    'label' => 'Category',
    'bundle' => 'company',
    'required' => TRUE,
  ))->save();

  // Assign form display for the 'default' form mode.
  entity_get_form_display('node', 'company', 'default')
    ->setComponent('taxonomy_vendor_category', array(
    'type' => 'options_select',
  ))
  ->save();

  $vid = Vocabulary::load('vendor_category')->id();
  $tree = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree($vid);
  if (!$tree) {
    $terms = array('Hair & Make-up', 'Florist', 'Event Planner', 'Photographer', 'Cakes','Deejays', 'Bridal Gowns', 'Tuxedos', 'Venues', 'Officants', 'Caterers', 'Videographers');
    // create default terms
    foreach ($terms as $term) {
      $term = entity_create('taxonomy_term', array(
        'name' => $term,
        'description' => '',
        'parent' => array(0),
        'vid' => 'vendor_category',
      ));
      $term->save();
    };
  };

  // Now lets attached a term ref field to Vendor node type
  entity_create('field_storage_config', array(
    'field_name' => 'taxonomy_photography_style',
    'entity_type' => 'node',
    'type'  => 'taxonomy_term_reference',
    'cardinality' => -1,
    'settings' => array(
      'allowed_values' => array(
        array(
          'vocabulary' => 'photography_style',
          'parent' => 0,
        ),
      ),
    ),
  ))->save();

  // create the instance on the bundle
  entity_create('field_config', array(
    'field_name' => 'taxonomy_photography_style',
    'entity_type' => 'node',
    'label' => 'Photo Style',
    'bundle' => 'vendor_image',
    'required' => TRUE,
  ))->save();

  // Assign form display for the 'default' form mode.
  entity_get_form_display('node', 'vendor_image', 'default')
    ->setComponent('taxonomy_photography_style', array(
      'type' => 'options_buttons',
  ))
  ->save();

  $vid = Vocabulary::load('photography_style')->id();
  $tree = \Drupal::entityManager()->getStorage('taxonomy_term')->loadTree($vid);
  if (!$tree) {
    $terms = array('Photojournalism', 'Soft & Dreamy', 'Traditional / Classic', 'Contemporary / Mordern', 'Artistic / Fine Art');
    // create default terms
    foreach ($terms as $term) {
      $term = entity_create('taxonomy_term', array(
        'name' => $term,
        'description' => '',
        'parent' => array(0),
        'vid' => 'photography_style',
      ));
      $term->save();
    };
  };

  // do not allow company node type to be deleted
  $locked = Drupal::state()->get('node.type.locked');
  $locked['company'] = 'company';
  $locked['vendor_image'] = 'vendor_image';
  Drupal::state()->set('node.type.locked', $locked);

};


/**
 * Implements hook_uninstall()
 */
function honeycomb_uninstall() {

  if ($field_storage = FieldStorageConfig::loadByName('node', 'taxonomy_vendor_category')) {
    $field_storage->delete();
  }
  if ($field_storage = FieldStorageConfig::loadByName('node', 'taxonomy_photography_style')) {
    $field_storage->delete();
  }

  // Purge field data now to allow taxonomy and options module to be uninstalled
  // if this is the only field remaining.
  field_purge_batch(10);

  // allow company to be deleted
  $locked = Drupal::state()->get('node.type.locked');
  unset($locked['company']);
  unset($locked['vendor_image']);
  Drupal::state()->set('node.type.locked', $locked);

};

/**
 * Implements hook_schema()
 */
function honeycomb_schema() {

  $schema['honeycomb_like'] = array(
    'description' => 'Stores the photo likes of users.',
    'fields' => array(
      'uid' => array(
        'description' => 'Primarykey: {users}.uid for user.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'The Vendor Image Node ID',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'tid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
        'description' => 'The {taxonomy_term_data}.tid of the vendor category.',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the record was created.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('uid', 'nid'),
    'indexes' => array(
      'created' => array('created'),
      'tid' => array('tid'),
    ),
  );


  return $schema;

}
